---
title: "Tree_Forest_Work"
author: "Clayton Fogler"
format: html
editor: visual
---

*Load in the packages the link said I needed

```{r}
# Helper packages
library(tidyverse)
library(doParallel)
library(foreach)

#Modeling packages
library(caret)
library(rpart)
library(ipred)

library(ranger)
library(h2o)
```

*Reading in all of our data.*

```{r}
endicott_2024 <- read_csv(here::here("data/endicott_2024.csv"))
norwich_2024 <- read_csv(here::here("data/norwich_2024.csv"))
wne_2024 <- read_csv(here::here("data/wne_2024.csv"))
union_2024 <- read_csv(here::here("data/union_2024.csv"))
rpi_2024 <- read_csv(here::here("data/rpi_2024.csv"))
hobart_2024 <- read_csv(here::here("data/hobart_2024.csv"))
rochester_2024 <- read_csv(here::here("data/rochester_2024.csv"))
ithaca_2024 <- read_csv(here::here("data/ithaca_2024.csv"))
buffstate_2024 <- read_csv(here::here("data/buffstate_2024.csv"))

norwich_2025 <- read_csv(here::here("data/norwich_2025.csv"))
fisher_2025 <- read_csv(here::here("data/fisher_2025.csv"))
alfred_2025 <- read_csv(here::here("data/alfred_2025.csv"))
union_2025 <- read_csv(here::here("data/union_2025.csv"))
hilbert_2025 <- read_csv(here::here("data/hilbert_2025.csv"))
ithaca_2025 <- read_csv(here::here("data/ithaca_2025.csv"))
```

*Clean up our data in each set before joining them all together.*

```{r}
union_2024 <- union_2024 |>
  select(-YEAR)

endicott_2024 <- endicott_2024[-46, ]

```

*Add an opponent and year column.*

```{r}
endicott_2024 <- endicott_2024 |>
  mutate(OPPONENT = "endicott", YEAR = "2024") 
  
norwich_2024 <- norwich_2024 |>
  mutate(OPPONENT = "norwich", YEAR = "2024") 

wne_2024 <- wne_2024 |>
  mutate(OPPONENT = "wne", YEAR = "2024") 

union_2024 <- union_2024 |>
  mutate(OPPONENT = "union", YEAR = "2024") 

rpi_2024 <- rpi_2024 |>
  mutate(OPPONENT = "rpi", YEAR = "2024") 

hobart_2024 <- hobart_2024 |>
  mutate(OPPONENT = "hobart", YEAR = "2024") 

rochester_2024 <- rochester_2024 |>
  mutate(OPPONENT = "rochester", YEAR = "2024") 

ithaca_2024 <- ithaca_2024|>
  mutate(OPPONENT = "ithaca", YEAR = "2024") 

buffstate_2024 <- buffstate_2024 |>
  mutate(OPPONENT = "buffstate", YEAR = "2024") 

norwich_2025 <- norwich_2025 |>
  mutate(OPPONENT = "norwich", YEAR = "2025")

fisher_2025 <- fisher_2025 |>
  mutate(OPPONENT = "fisher", YEAR = "2025")

alfred_2025 <- alfred_2025 |>
  mutate(OPPONENT = "alfred", YEAR = "2025")

union_2025 <- union_2025 |>
  mutate(OPPONENT = "union", YEAR = "2025")

hilbert_2025 <- hilbert_2025 |>
  mutate(OPPONENT = "hilbert", YEAR = "2025")

ithaca_2025 <- ithaca_2025 |>
  mutate(OPPONENT = "ithaca", YEAR = "2025")

```

*Combine all of the different data sets into one.*

```{r}
`all_seasons` <- rbind(endicott_2024, norwich_2024, wne_2024, union_2024, rpi_2024, hobart_2024, rochester_2024, ithaca_2024, buffstate_2024, norwich_2025, fisher_2025, alfred_2025, union_2025, hilbert_2025, ithaca_2025)
```

*Now select the columns we want to keep, at least for now.*

```{r}
`all_seasons` <- `all_seasons` |>
  select(
    OPPONENT, YEAR, "PLAY #", DN, DIST, "YARD LN", HASH, "GN/LS", "R/P", HASH, "FORMATION FAMILY", "OFF FORM", BACKFIELD, MOTION, "FORMATION TAG", PROTECTION, "PLAY RESULT", PERSONNEL
  )
```

*Create our "Success" variable, a binary variable that will be a 1 for successful and a 0 for not successful. A Successful play will be determined as followed:*

*First down play is successful if the offense gains 40% or more of the yards to go. (Gaining 4 yards on 1st and 10 is successful, 3 yards is not).*

*Second down play is successful if the offense gains 60% or more of the yards to go. (Gaining 6 yards on a 2nd and 10 is successful, 5 yards is not).*

*Third and Fourth down plays are successful if the play gains 100% or more of the yards to go. (Gaining 4 yards on a 3rd and 4 is successful, 3 yards is not).*

#find my source i used to be able to cite

```{r}
 `all_seasons` <- `all_seasons` |>
    mutate(
      SUCCESSFUL = case_when(
        DN == 0 & `GN/LS` >= (0.4 * DIST) ~ 1,                     
        DN == 1 & `GN/LS` >= (0.4 * DIST) ~ 1,
        DN == 2 & `GN/LS` >= (0.6 * DIST) ~ 1,
        DN == 3 & `GN/LS` >= (DIST) ~ 1,
        DN == 4 & `GN/LS` >= (DIST) ~ 1,
        TRUE ~ 0
      )
    )
```

*We will also create down and distance bins to group the distances to be more usable.*

```{r}
`all_seasons` <- `all_seasons` |>
  mutate(
    SITUATION = case_when(
      DIST <= 3 ~ "Short (1-3)",
      DIST <= 6 ~ "Medium (4-6)",
      DIST <= 10 ~ "Long (7-10)",
      TRUE ~ "Very Long (11+)"
    )
  ) 
```


**removing all rows that have NAs in them*

```{r}
all_seasons <- all_seasons %>%
  filter(!is.na(`R/P`)) %>%
  filter(!is.na(PERSONNEL)) %>%
  filter(!is.na(SITUATION)) %>%
  filter(!is.na(DN)) %>%
  filter(!is.na(SUCCESSFUL))

```





*Starting a new section or even new project almost, instead of log we are going to do classification trees:*


```{r}
library(rpart.plot)
library(rpart)
```

```{r}
 `all_seasons` <- `all_seasons` |>
    mutate(
      SUCCESSFUL = case_when(
        DN == 0 & `GN/LS` >= (0.4 * DIST) ~ "YES",                     
        DN == 1 & `GN/LS` >= (0.4 * DIST) ~ "YES",
        DN == 2 & `GN/LS` >= (0.6 * DIST) ~ "YES",
        DN == 3 & `GN/LS` >= (DIST) ~ "YES",
        DN == 4 & `GN/LS` >= (DIST) ~ "YES",
        TRUE ~ "NO"
      )
    )
```

```{r}
table(`all_seasons`$SUCCESSFUL)
```

```{r}
`all_seasons` <-`all_seasons` |>
  mutate(
    SUCCESSFUL = as.factor(SUCCESSFUL),
    `R/P` = as.factor(`R/P`),
    PERSONNEL = as.factor(PERSONNEL),
    SITUATION = as.factor(SITUATION),
    DN = as.factor(DN)
    
  )
```


```{r}
all_seasons <- all_seasons %>%
  select(SUCCESSFUL, DN, SITUATION, PERSONNEL, `R/P`)
```


```{r}
treeall <- rpart(SUCCESSFUL ~ `R/P` + PERSONNEL + SITUATION + DN, data = `all_seasons`, method = "class")
treeall
rpart.plot(treeall, extra = 104)
```

```{r}
count.matrix <- table(all_seasons$SUCCESSFUL, predict(treeall, type = "class"))
rownames(count.matrix) <- c("Actual Fails", "Actual Successes")
colnames(count.matrix) <- c("Predicted Fails", "Predicted Successes")
count.matrix
```


*Bagging introduction stuff*

```{r}
# football bagged model
football_bag1 <- bagging(
  formula = SUCCESSFUL ~ `R/P` + PERSONNEL + SITUATION + DN,
  data = all_seasons,
  nbagg = 100,  
  coob = TRUE,
  control = rpart.control(minsplit = 2, cp = 0)
)

football_bag1
```
```{r}
all_seasons <- all_seasons %>%
  rename(RP = `R/P`)
```



```{r}
football_bag2 <- train(
  SUCCESSFUL ~ .,
  data = all_seasons,
  method = "treebag",
  trControl = trainControl(method = "cv", number = 10),
  nbagg = 200,  
  control = rpart.control(minsplit = 2, cp = 0)
)

football_bag2
```

I am stuck herem cant't figure out what is wrong, can't figure out why the code won't work

```{r}
# Create a parallel socket cluster
cl <- makeCluster(8) # use 8 workers
registerDoParallel(cl) # register the parallel backend

# Fit trees in parallel and compute predictions on the test set
predictions <- foreach(
  icount(160), 
  .packages = "rpart", 
  .combine = cbind
  ) %dopar% {
    # bootstrap copy of training data
    index <- sample(nrow(all_seasons), replace = TRUE)
    football_train_boot <- all_seasons[index, ]  
  
    # fit tree to bootstrap copy
    bagged_tree <- rpart(
      SUCCESSFUL ~ ., 
      control = rpart.control(minsplit = 2, cp = 0),
      data = football_train_boot
      ) 
    
    predict(bagged_tree, newdata = all_seasons)
}

predictions[1:5, 1:7]
```



```{r}
predictions %>%
  as.data.frame() %>%
  mutate(
    observation = 1:n(),
    actual = ames_test$Sale_Price) %>%
  tidyr::gather(tree, predicted, -c(observation, actual)) %>%
  group_by(observation) %>%
  mutate(tree = stringr::str_extract(tree, '\\d+') %>% as.numeric()) %>%
  ungroup() %>%
  arrange(observation, tree) %>%
  group_by(observation) %>%
  mutate(avg_prediction = cummean(predicted)) %>%
  group_by(tree) %>%
  summarize(RMSE = RMSE(avg_prediction, actual)) %>%
  ggplot(aes(tree, RMSE)) +
  geom_line() +
  xlab('Number of trees')
```



```{r}
# Shutdown parallel cluster
stopCluster(cl)
```


*moving on to random forest*

1.  Given a training data set
2.  Select number of trees to build (n_trees)
3.  for i = 1 to n_trees do
4.  |  Generate a bootstrap sample of the original data
5.  |  Grow a regression/classification tree to the bootstrapped data
6.  |  for each split do
7.  |  | Select m_try variables at random from all p variables
8.  |  | Pick the best variable/split-point among the m_try
9.  |  | Split the node into two child nodes
10. |  end
11. | Use typical tree model stopping criteria to determine when a 
    | tree is complete (but do not prune)
12. end
13. Output ensemble of trees

```{r}
# number of features
n_features <- length(setdiff(names(all_seasons), "SUCCESSFUL"))

# train a default random forest model
football_rf1 <- ranger(
  SUCCESSFUL ~ ., 
  data = all_seasons,
  mtry = floor(n_features / 3),
  respect.unordered.factors = "order",
  seed = 123
)

# get OOB RMSE
(default_rmse <- sqrt(football_rf1$prediction.error))
```



