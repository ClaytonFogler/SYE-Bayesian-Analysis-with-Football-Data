---
title: "2024_Season"
author: "Fogler"
format: html
editor: visual
---


```{r}
library(tidyverse)
```

_Reading in all of our data._

```{r}
endicott_2024 <- read_csv(here::here("data/endicott_2024.csv"))
norwich_2024 <- read_csv(here::here("data/norwich_2024.csv"))
wne_2024 <- read_csv(here::here("data/wne_2024.csv"))
union_2024 <- read_csv(here::here("data/union_2024.csv"))
rpi_2024 <- read_csv(here::here("data/rpi_2024.csv"))
hobart_2024 <- read_csv(here::here("data/hobart_2024.csv"))
rochester_2024 <- read_csv(here::here("data/rochester_2024.csv"))
ithaca_2024 <- read_csv(here::here("data/ithaca_2024.csv"))
buffstate_2024 <- read_csv(here::here("data/buffstate_2024.csv"))
```

_Clean up our data in each set before joining them all together._

```{r}
union_2024 <- union_2024 |>
  select(-YEAR)
```

_Add an opponent and year column._

```{r}
endicott_2024 <- endicott_2024 |>
  mutate(OPPONENT = "endicott", YEAR = "2024") 
  
norwich_2024 <- norwich_2024 |>
  mutate(OPPONENT = "norwich", YEAR = "2024") 

wne_2024 <- wne_2024 |>
  mutate(OPPONENT = "wne", YEAR = "2024") 

union_2024 <- union_2024 |>
  mutate(OPPONENT = "union", YEAR = "2024") 

rpi_2024 <- rpi_2024 |>
  mutate(OPPONENT = "rpi", YEAR = "2024") 

hobart_2024 <- hobart_2024 |>
  mutate(OPPONENT = "hobart", YEAR = "2024") 

rochester_2024 <- rochester_2024 |>
  mutate(OPPONENT = "rochester", YEAR = "2024") 

ithaca_2024 <- ithaca_2024|>
  mutate(OPPONENT = "ithaca", YEAR = "2024") 

buffstate_2024 <- buffstate_2024 |>
  mutate(OPPONENT = "buffstate", YEAR = "2024") 
```

_Combine all of the different data sets into one._

```{r}
`2024_Season` <- rbind(endicott_2024, norwich_2024, wne_2024, union_2024, rpi_2024, hobart_2024, rochester_2024, ithaca_2024, buffstate_2024)
```

_Now select the columns we want to keep, at least for now._

```{r}
`2024_Season` <- `2024_Season` |>
  select(
    OPPONENT, YEAR, "PLAY #", DN, DIST, "YARD LN", HASH, "GN/LS", "R/P", HASH, "FORMATION FAMILY", "OFF FORM", BACKFIELD, MOTION, "FORMATION TAG", PROTECTION, "PLAY RESULT", PERSONNEL
  )
```

_Create our "Success" variable, a binary variable that will be a 1 for successful and a 0 for not successful. A Successful play will be determined as followed:_

_First down play is successful if the offense gains 40% or more of the yards to go. (Gaining 4 yards on 1st and 10 is successful, 3 yards is not)._

_Second down play is successful if the offense gains 60% or more of the yards to go. (Gaining 6 yards on a 2nd and 10 is successful, 5 yards is not)._

_Third and Fourth down plays are successful if the play gains 100% or more of the yards to go. (Gaining 4 yards on a 3rd and 4 is successful, 3 yards is not)._

#find my source i used to be able to cite
```{r}
 `2024_Season` <- `2024_Season` |>
    mutate(
      SUCCESSFUL = case_when(
        DN == 0 & `GN/LS` >= (0.4 * DIST) ~ 1,                     
        DN == 1 & `GN/LS` >= (0.4 * DIST) ~ 1,
        DN == 2 & `GN/LS` >= (0.6 * DIST) ~ 1,
        DN == 3 & `GN/LS` >= (DIST) ~ 1,
        DN == 4 & `GN/LS` >= (DIST) ~ 1,
        TRUE ~ 0
      )
    )
```

_We will also create down and distance bins to group the distances to be more usable._

```{r}
`2024_Season` <- `2024_Season` |>
  mutate(
    SITUATION = case_when(
      DIST <= 3 ~ "Short (1-3)",
      DIST <= 6 ~ "Medium (4-6)",
      DIST <= 10 ~ "Long (7-10)",
      TRUE ~ "Very Long (11+)"
    )
  ) 
```

_Now, time to find tendencies of success, starting with success based on down and distance._

```{r}
success_by_situation <- `2024_Season` |>
  group_by(DN, SITUATION) |>
  summarise(
    plays = n(),
    success_rate = mean(SUCCESSFUL, na.rm = TRUE)
  ) |>
  arrange(DN, desc(success_rate))

success_by_situation
```

_Tendencies of success, based on run pass._

```{r}
success_by_run_pass <- `2024_Season` |>
  group_by(`R/P`) |>
  summarise(
    plays = n(),
    success_rate = mean(SUCCESSFUL, na.rm = TRUE)
  ) |>
  arrange(success_rate)

success_by_run_pass
```

_Tendencies of success, based on formation._

```{r}
success_by_formation <- `2024_Season` |>
  group_by(`FORMATION FAMILY`) |>
  summarise(
    plays = n(),
    success_rate = mean(SUCCESSFUL, na.rm = TRUE)
  ) |>
  arrange(success_rate)
  
success_by_formation  
  
```

_Tendencies of success, based on combining formation and distance._

```{r}
success_by_situation_formation <- `2024_Season` |>
  group_by(`FORMATION FAMILY`, SITUATION) |>
  summarise(
    plays = n(),
    success_rate = mean(SUCCESSFUL, na.rm = TRUE),
    .groups = "drop"
  ) |>
  arrange(`FORMATION FAMILY`, SITUATION)

success_by_situation_formation
```


_Now, lets build a logistic regression

```{r}
# try out using just distance instead factor(situation)

logrun <- glm(SUCCESSFUL ~ `R/P`, data = `2024_Season`, family = binomial)

logsituation <- glm(SUCCESSFUL ~ SITUATION, data = `2024_Season`, family = binomial)

logdn <- glm(SUCCESSFUL ~ factor(DN), data = `2024_Season`, family = binomial)

logformation <- glm(SUCCESSFUL ~ `FORMATION FAMILY`, data = `2024_Season`, family = binomial)

logmodel1 <- glm(SUCCESSFUL ~ factor(`R/P`) + factor(SITUATION) + factor(DN) + factor(`FORMATION FAMILY`), data = `2024_Season`, family = binomial)

logmodel2 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(DN) + factor(SITUATION) + factor(`FORMATION FAMILY`), data = `2024_Season`, family = binomial)

logmodel3 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(DN) + factor(SITUATION) * factor(`FORMATION FAMILY`), data = `2024_Season`, family = binomial)

logmodel4 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(`FORMATION FAMILY`) + factor(DN) + factor(SITUATION), data = `2024_Season`, family = binomial)

logmodel5 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(SITUATION) + factor(DN) + factor(`FORMATION FAMILY`), data = `2024_Season`, family = binomial)

logmodel7 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(DN) + DIST + factor(`FORMATION FAMILY`), data = `2024_Season`, family = binomial)
#add some sort of interaction to logmodel7
```


```{r}
summary(logrun)
```


```{r}
summary(logsituation)
```


```{r}
summary(logdn)
```


```{r}
summary(logformation)
```

```{r}
AIC(logrun, logsituation, logdn, logformation, logmodel1, logmodel2)
```

```{r}
AIC(logmodel1, logmodel2, logmodel3, logmodel4, logmodel5, logmodel7)
```



```{r}
install.packages("broom")
```



```{r}
library(modelr)
library(broom)

grid <- `2024_Season` |>
  data_grid(
    `R/P` = c("R", "P"),
    DN = c(0, 1, 2, 3, 4),
    SITUATION = c("Short (1-3)", "Medium (4-6)", "Long (7-10)", "Very Long (11+)"),
    `FORMATION FAMILY` = c("EMPTY", "FLEX", "SHOE", "SPIKE", "SPILL", "SPIN", "SPREAD", "SPRINT", "SWEAT", "TAP", "TEX", "TOP", "TRIGGER", "TRIPS", "TUB")
  )

aug_surv <- augment(logmodel2, newdata = grid,
                    se_fit = TRUE)
```


```{r}
# switch fitted to predicted, make x = distance, down goes on facet
ggplot(aug_surv, aes(x = DN, y = .fitted, color = `R/P`)) +
  geom_line() +
  facet_grid(SITUATION ~ `FORMATION FAMILY`) +
  labs(
    y = "Log odds of Success",
    x = "Down",
    color = "Run/Pass"
  ) +
  theme_minimal()
```

_Instead of using downs on the x, we made a new logmodel, logmodel7 (see above for what that model entails)_

_This new model ended up being slighty better than logmodel2 anyways._











```{r}
grid2 <- `2024_Season` |>
  #building our potential data for our predictions based off logmodel7
  data_grid(
    `R/P` = c("R", "P"),
    DN = c(0, 1, 2, 3, 4),
    DIST = c(1:20, 22, 25),
    `FORMATION FAMILY` = c("EMPTY", "FLEX", "SHOE", "SPIKE", "SPILL", "SPIN", "SPREAD", "SPRINT", "SWEAT", "TAP", "TEX", "TOP", "TRIGGER", "TRIPS", "TUB")
  )
#predicted values based of our logmodel7
aug_surv2 <- augment(logmodel7, newdata = grid2,
                    se_fit = TRUE)
```


```{r}
# switch fitted to predicted, make x = distance, down goes on facet
ggplot(aug_surv2, aes(x = DIST, y = .fitted, color = `R/P`)) +
  geom_line() +
  facet_grid(DN~`FORMATION FAMILY`) +
  labs(
    y = "Log odds of Success",
    x = "Down",
    color = "Run/Pass"
  ) +
  theme_minimal()
```

_switch it from log odds to probability_
```{r}
aug_surv3 <- aug_surv2 %>%
  mutate(
    prob = plogis(.fitted)
  )
```


```{r}
# switch fitted to predicted, make x = distance, down goes on facet
ggplot(aug_surv3, aes(x = DIST, y = prob, color = `R/P`)) +
  geom_line() +
  facet_grid( DN ~`FORMATION FAMILY`) +
  labs(
    y = "Probability of Success",
    x = "Distance",
    color = "Run/Pass"
  ) +
  theme_minimal()
```




```{r}
#ADD IN A COUNT VARIABLE geom text, also do more heat maps with proportions of failures and successes instead of just success rate

success_map <- `2024_Season` |>
  mutate(DN = as.factor(DN),
         SITUATION = as.factor(SITUATION)) |>
  group_by(DN, SITUATION, .drop = FALSE) |>
  summarise(
    SUCCESS = mean(SUCCESSFUL),
    n = n()) |>
  ungroup() |>
  mutate(
    # recode situation for nicer labels
    SITUATION = fct_recode(SITUATION,
                           "Short (1-3)" = "1",
                           "Medium (4-6)" = "2",
                           "Long (7-10)" = "3",
                           "Very Long (11+)" = "4"),
    # order downs from 1st to 4th
    DN = fct_relevel(DN, c("0","1","2","3","4"))
  )
success_map
# heatmap
ggplot(success_map, aes(x = DN, y = SITUATION, fill = SUCCESS)) +
  geom_tile(colour = "grey") +
  geom_text(aes(label = n), color = "white", fontface = "bold") +
  scale_fill_viridis_c(name = "Success Rate", labels = scales::percent) +
  theme_minimal() +
  scale_x_discrete(position = "top")
```

```{r}
failure_map_rp <- `2024_Season` |>
  mutate(
    DN = as.factor(DN),
    RP = as.factor(`R/P`)   # make R/P into a factor
  ) |>
  group_by(DN, RP, .drop = FALSE) |>
  summarise(
    FAILURE = 1 - mean(SUCCESSFUL, na.rm = TRUE),  # proportion of failures,  # proportion successful
    n = n()                                    # count of plays
  ) |>
  ungroup() |>
  mutate(
    # order downs from 1st to 4th
    DN = fct_relevel(DN, c("0","1","2","3","4"))
  )

failure_map_rp

ggplot(failure_map_rp, aes(x = DN, y = RP, fill = FAILURE)) +
  geom_tile(colour = "grey") +
  geom_text(aes(label = n), color = "white", fontface = "bold") +
  scale_fill_viridis_c(
    name = "Failure Rate", 
    labels = scales::percent
  ) +
  theme_minimal() +
  scale_x_discrete(position = "top") +
  labs(x = "Down", y = "Run / Pass")
```

```{r}
success_map_sit_rp <- `2024_Season` |>
  mutate(
    SITUATION = as.factor(SITUATION),
    RP = as.factor(`R/P`)
  ) |>
  group_by(SITUATION, RP, .drop = FALSE) |>
  summarise(
    SUCCESS = mean(SUCCESSFUL, na.rm = TRUE),  # proportion of successes
    n = n()                                    # count of plays
  ) |>
  ungroup() |>
  mutate(
    # recode situations for nicer labels
    SITUATION = fct_recode(SITUATION,
                           "Short (1-3)" = "1",
                           "Medium (4-6)" = "2",
                           "Long (7-10)" = "3",
                           "Very Long (11+)" = "4")
  )

success_map_sit_rp

ggplot(success_map_sit_rp, aes(x = SITUATION, y = RP, fill = SUCCESS)) +
  geom_tile(colour = "grey") +
  geom_text(aes(label = n), color = "white", fontface = "bold") +
  scale_fill_viridis_c(
    name = "Success Rate",
    labels = scales::percent
  ) +
  theme_minimal() +
  scale_x_discrete(position = "top") +
  labs(x = "Situation", y = "Run / Pass")
```





Exploratory bar plots

```{r}
# situation, success rate
ggplot(`2024_Season` |> 
         group_by(SITUATION) |> 
         summarise(success_rate = mean(SUCCESSFUL, na.rm = TRUE)),
       aes(x = SITUATION, y = success_rate)) +
  geom_col(fill = "blue") +
  theme_minimal() +
  labs(x = "Situation", y = "Success Rate") +
  scale_y_continuous(labels = scales::percent)

# down, success rate
ggplot(`2024_Season` |> 
         group_by(DN) |> 
         summarise(success_rate = mean(SUCCESSFUL, na.rm = TRUE)),
       aes(x = DN, y = success_rate)) +
  geom_col(fill = "blue") +
  theme_minimal() +
  labs(x = "Down", y = "Success Rate") +
  scale_y_continuous(labels = scales::percent)

# run/pass, success rate
ggplot(`2024_Season` |> 
         group_by(`R/P`) |> 
         summarise(success_rate = mean(SUCCESSFUL, na.rm = TRUE)),
       aes(x = `R/P`, y = success_rate)) +
  geom_col(fill = "blue") +
  theme_minimal() +
  labs(x = "Run/Pass", y = "Success Rate") +
  scale_y_continuous(labels = scales::percent)

# Offensive formation, success rate
ggplot(`2024_Season` |> 
         group_by(`PERSONNEL`) |> 
         summarise(success_rate = mean(SUCCESSFUL, na.rm = TRUE)),
       aes(x = PERSONNEL, y = success_rate)) +
  geom_col(fill = "blue") +
  theme_minimal() +
  labs(x = "Personnel", y = "Success Rate") +
  scale_y_continuous(labels = scales::percent)
```

Some more interaction testing

```{r}
# the model from way above that we said was our best model so far
logmodel7 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(DN) + DIST + factor(`FORMATION FAMILY`), data = `2024_Season`, family = binomial)
# add an interaction with DIST ADN `r/p`
logmodel8 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(DN) + DIST * factor(`R/P`) + factor(`FORMATION FAMILY`), data = `2024_Season`, family = binomial)

# add an interaction with Formation and `r/p`
logmodel9 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(DN) + factor(`FORMATION FAMILY`) * factor(`R/P`) + DIST, data = `2024_Season`, family = binomial)
# Interaction between `r/p`, DN, and DIST
logmodel10 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(DN) * DIST + factor(`FORMATION FAMILY`), data = `2024_Season`, family = binomial)
logmodel11 <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(DN) * DIST,data = `2024_Season`, family = binomial)
```

```{r}
AIC(logmodel7, logmodel8, logmodel9, logmodel10, logmodel11)
```

Exploring Personnels

```{r}
success_by_personnel <- `2024_Season` |>
  group_by(`PERSONNEL`) |>
  summarise(
    plays = n(),
    success_rate = mean(SUCCESSFUL, na.rm = TRUE)
  ) |>
  arrange(success_rate)
  
success_by_personnel
  
```

```{r}
logmodelpersonnel <- glm(SUCCESSFUL ~ factor(`R/P`) * factor(DN) + DIST + factor(`PERSONNEL`) + factor(`OFF FORM`), data = `2024_Season`, family = binomial)

```

```{r}
AIC(logmodel7, logmodelpersonnel)
```




_Starting a new section or even new project almost, instead of log we are going to do classification trees:

Just for easy access and simplicity, just going to recode the data down here:

```{r}
install.packages("rpart.plot")
```
```{r}
library(rpart.plot)
library(rpart)
```

```{r}
 `2024_Season` <- `2024_Season` |>
    mutate(
      SUCCESSFUL = case_when(
        DN == 0 & `GN/LS` >= (0.4 * DIST) ~ "YES",                     
        DN == 1 & `GN/LS` >= (0.4 * DIST) ~ "YES",
        DN == 2 & `GN/LS` >= (0.6 * DIST) ~ "YES",
        DN == 3 & `GN/LS` >= (DIST) ~ "YES",
        DN == 4 & `GN/LS` >= (DIST) ~ "YES",
        TRUE ~ "NO"
      )
    )
```



```{r}
table(`2024_Season`$SUCCESSFUL)
```


```{r}
`2024_Season` <- `2024_Season` |>
  mutate(
    SUCCESSFUL = as.factor(SUCCESSFUL),
    `R/P` = as.factor(`R/P`),
    PERSONNEL = as.factor(PERSONNEL),
    SITUATION = as.factor(SITUATION),
    DN = as.factor(DN)
    
  )
```




```{r}
treeall <- rpart(SUCCESSFUL ~ `R/P` + PERSONNEL + SITUATION + DN, data = `2024_Season`, method = "class")
treeall
rpart.plot(treeall)
```
```{r}
count.matrix <- table(`2024_Season`$SUCCESSFUL, predict(treeall, type = "class"))
rownames(count.matrix) <- c("Actual Fails", "Actual Successes")
colnames(count.matrix) <- c("Predicted Fails", "Predicted Successes")
count.matrix
```





